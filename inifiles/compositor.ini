# Configuration file for MCE - Compositor handoff handling
#
# Which process "owns" display changes during device bootup
# something like:
#   1. boot loader can show a logo
#   2. splashscreen image (optional)
#   3. unlock ui (in case of encrypted home)
#   4. startup wizard (in case of first boot)
#   5. lipstick
#
# In devices that use drm graphics, the previous owner needs to let
# go of the display before other processes can acquire it.
# Additionally some UIs use kernel interfaces for drawing while
# others rely on android hw compositor service - which then also
# needs to be started / stopped based on the future need. In order
# to avoid race conditions and/or excessive blank screen time this
# all is synchronized as follows.
#
# When a process has acquired the well known compositor D-Bus
# service name and has gotten permission to draw from MCE, it can
# acquire display and start rendering.
#
# When the process loses service name ownership, it must stop
# drawing and exit as soon as possible.
#
# When service name owner change is seen, MCE queries from the new
# name owner what kind hwc needs it has, waits for the previous
# compositor process to exit, then performs the requested setup
# actions, and finally gives the new compositor process permission
# to draw.
#
# Effectively this means that for example splashscreen application
# terminates when unlock ui replaces it as owner of compositor D-Bus
# service name. MCE then waits for splashscreen process to exit,
# ensures that hw composer service is stopped, and gives unlock ui
# permission to draw. At which stage unlock ui acquires display and
# shows security code prompt.
#
# Whether and what kinds commands are used for starting and stopping
# of android hw compositor service vary from one device type to
# another, these details should be defined in a device type specific
# configuration file.
#
# For the sake of backwards compatibility: when dealing with UIs
# that do not implement the new hwc query D-Bus method call, mce
# assumes that no actions should be taken - assumption being that
# these are utilizing systemd service tweaks for setting correct hwc
# state.

[Compositor]

# By default nothing is executed.

# As an example: Values that are usable with Xperia 10 III

# UIs that use kernel interfaces can request hwc to be stopped
#
#StopHwCompositor=/system/bin/stop vendor.qti.hardware.display.composer

# UIs that use android interfaces can request hwc to be started up
#
#StartHwCompositor=/system/bin/start vendor.qti.hardware.display.composer

# In some cases special hwc restart might be needed.
#
# Note: If this value is not defined, mce will use StopHwCompositor
#       command followed by StartHwCompositor command.
#
#RestartHwCompositor=/usr/bin/setprop ctl.restart vendor.qti.hardware.display.composer
